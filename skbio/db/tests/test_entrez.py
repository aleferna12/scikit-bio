import unittest
from unittest import mock
import json
from xml.etree.ElementTree import Element

from skbio.db import entrez
from skbio.util import get_data_path


def get_url_from_patch(patch: mock.Mock):
    args, kwargs = patch.call_args
    request = args[0]
    return request.full_url + request.data.decode("ascii")


def urlopen_patch(response_code=200, response_parse_mode="text"):
    """Interjects the urlopen function to return a mocked HTTPResponse."""
    mocked_response = mock.NonCallableMagicMock()
    mocked_response.code = response_code
    # Fills the content of the mocked response with something that the parser will be able to
    # interpret
    if response_parse_mode == "json":
        response_content = "{}".encode("UTF-8")
    elif response_parse_mode == "xml":
        response_content = "<Element></Element>".encode("UTF-8")
    else:
        response_content = b""
    mocked_response.read.return_value = response_content
    mocked_response.__enter__.return_value = mocked_response

    return mock.patch("skbio.db.entrez.urlopen", return_value=mocked_response)


class TestOffline(unittest.TestCase):
    """Set os tests that can be performed offline.

    These tests ensure a correspondence between the URL generated by the entrez functions and the
    expected tested URL. They also test if `entrez._parse_response` can correctly convert between
    types (doesn't test if the content of the response is correct though).
    """
    def test_einfo_no_args(self):
        # Because the default arguments must be included in the URL, a parameterized URL is
        # inevitable even if we call 'entrez.einfo()' with no arguments
        expected_url = "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/einfo.fcgi?retmode=xml"

        with urlopen_patch() as patch:
            result = entrez.einfo()

        self.assertEqual(expected_url, get_url_from_patch(patch))
        self.assertIsInstance(result, str)


class TestOnline(unittest.TestCase):
    """Set of tests that can only be performed online.

    These tests compare the output of an actual call of entrez functions against pre-obtained files
    that represent the expected result. Both the retrieval of text data and further parsing by the
    `entrez._parse_response` are tested.

    Presumes there is access to the internet and that the Entrez API is stable enough to always
    return the same response (it should be).
    """
    def test_einfo_no_args(self):
        result = entrez.einfo()
        with open(get_data_path("einfo_no_args.xml")) as file:
            expected_result = file.read()

        self.assertEqual(result, expected_result)

    def test_bad_request(self):
        result = entrez.einfo(db="soccer", retmode="lasagna")
        self.assertEqual(result, "")


# objs = {
#     "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/einfo.fcgi?retmode=json": entrez.einfo(retmode="json"),
#     "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/einfo.fcgi?db=protein&version=2.0&retmode=xml": entrez.einfo("protein", version=2),
#     "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=pubmed&term=cancer&usehistory=y&retstart=0&retmax=100&rettype=uilist&retmode=xml&datetype=edat&reldate=60": entrez.esearch("pubmed", "cancer", reldate=60, datetype="edat", retmax=100, usehistory='y'),
#     "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=nucleotide&term=biomol%2Btrna%5Bprop%5D&retstart=0&retmax=20&rettype=uilist&retmode=xml": entrez.esearch("nucleotide", "biomol+trna[prop]"),
#     "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=protein&term=70000%3A90000%5Bmolecular%2Bweight%5D&retstart=0&retmax=20&rettype=uilist&retmode=xml": entrez.esearch("protein", "70000:90000[molecular+weight]"),
#     "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/epost.fcgi?db=pubmed&id=11237011%2C12466850": entrez.epost("pubmed", [11237011, 12466850]),
#     "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esummary.fcgi?db=pubmed&id=11850928%2C11482001&retstart=0&retmode=xml&version=2.0": entrez.esummary("pubmed", id=[11850928, 11482001], version=2),
#     "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esummary.fcgi?db=nucleotide&id=28864546%2C28800981&retstart=0&retmode=xml": entrez.esummary("nucleotide", id=[28864546, 28800981]),
#     "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=pubmed&id=11748933%2C11700088&retmode=xml&retstart=0": entrez.efetch("pubmed", id=[11748933, 11700088], retmode="xml"),
#     "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=nuccore&id=21614549&retmode=text&rettype=fasta&retstart=0&strand=1&seq_start=1&seq_stop=100": entrez.efetch("nuccore", id=21614549, strand=1, seq_start=1, seq_stop=100,
#            rettype="fasta", retmode="text"),
#     "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/elink.fcgi?db=gene&dbfrom=protein&cmd=neighbor&id=15718680%2C157427902&retmode=xml": entrez.elink("gene", "protein", id=[15718680, 157427902]),
#     "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/elink.fcgi?db=snp&dbfrom=gene&cmd=neighbor&id=93986&retmode=xml": entrez.elink("snp", "gene", id=93986),
#     "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/egquery?term=asthma&retmode=xml": entrez.egquery("asthma"),
#     "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/espell.fcgi?db=pubmed&term=asthmaa%2BOR%2Balergies": entrez.espell("pubmed", "asthmaa+OR+alergies"),
#     "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/ecitmatch.cgi?db=pubmed&retmode=xml&bdata=proc%2Bnatl%2Bacad%2Bsci%2Bu%2Bs%2Ba%7C1991%7C88%7C3248%7Cmann%2Bbj%7CArt1%7C%250Dscience%7C1987%7C235%7C182%7Cpalmenberg%2Bac%7CArt2%7C": entrez.ecitmatch("proc+natl+acad+sci+u+s+a|1991|88|3248|mann+bj|Art1|%0Dscience|1987|235|182|palmenberg+ac|Art2|")
# }

if __name__ == "__main__":
    unittest.main()